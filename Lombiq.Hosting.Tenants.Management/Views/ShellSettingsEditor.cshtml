@using Newtonsoft.Json
@model Lombiq.Hosting.Tenants.Management.Models.ShellSettingsEditorViewModel

<form asp-action="Edit"
      asp-controller="ShellSettingsEditor"
      asp-area="Lombiq.Hosting.Tenants.Management"
      method="post"
      class="no-multisubmit">
    <div class="@Orchard.GetWrapperCssClasses("field-wrapper")" id="FieldWrapper">
        <label asp-for="Json" class="@Orchard.GetLabelCssClasses()">@T["Shell Settings editor"]</label>
        <div class="@Orchard.GetEndCssClasses()">
            <div id="@Html.IdFor(model => model.Json)_editor" asp-for="Settings" style="min-height: 400px;" class="form-control"></div>
            <textarea asp-for="Json" hidden>@Html.Raw(Model.Json)</textarea>
        </div>
    </div>
    <div class="mb-3">
        <input hidden asp-for="TenantId" value="@Model.TenantId"/>
        <button class="btn btn-primary save" type="submit">@T["Save settings"]</button>
    </div>
</form>

<script asp-name="monaco" depends-on="admin" at="Foot"></script>
<script at="Foot" depends-on="monaco">
    $(document).ready(function () {
        require(['vs/editor/editor.main'], function () {
            var settings = @Html.Raw(JsonConvert.SerializeObject(
                new {
                    automaticLayout = true,
                    language = "json",
                }));

            var html = document.getElementsByTagName("html")[0];
            const mutationObserver = new MutationObserver(setTheme);
            mutationObserver.observe(html, { attributes: true });

            function setTheme() {
                var theme = html.dataset.theme;
                if (theme === "darkmode") {
                    monaco.editor.setTheme('vs-dark')
                } else {
                    monaco.editor.setTheme('vs')
                }
            }

            setTheme();

            var editor = monaco.editor.create(document.getElementById('@Html.IdFor(model => model.Json)_editor'), settings);
            var textArea = document.getElementById('@Html.IdFor(model => model.Json)');

            editor.getModel().setValue(textArea.value);

            window.addEventListener("submit", function () {
                textArea.value = editor.getValue();
            });

            editor.getModel().onDidChangeContent(() => {
                textArea.value = editor.getValue();
                $(document).trigger('contentpreview:render');
            });

            function formatDocument() {
              editor.getAction('editor.action.formatDocument').run();
            }

            editor.onDidChangeModelLanguageConfiguration(formatDocument);
            editor.onDidLayoutChange(formatDocument);
        });
    });
</script>
